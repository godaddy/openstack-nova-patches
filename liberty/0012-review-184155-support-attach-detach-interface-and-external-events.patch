diff --git a/nova/cells/manager.py b/nova/cells/manager.py
index 5b4811f..570b2f1 100644
--- a/nova/cells/manager.py
+++ b/nova/cells/manager.py
@@ -595,6 +595,18 @@ class CellsManager(manager.Manager):
     def set_admin_password(self, ctxt, instance, new_pass):
         self.msg_runner.set_admin_password(ctxt, instance, new_pass)
 
+    def attach_interface(self, ctxt, instance, network_id,
+                         port_id, requested_ip):
+        response = self.msg_runner.attach_interface(ctxt, instance,
+                                        network_id, port_id, requested_ip)
+        return response.value_or_raise()
+
+    def detach_interface(self, ctxt, instance, port_id):
+        self.msg_runner.detach_interface(ctxt, instance, port_id)
+
+    def external_instance_event(self, ctxt, instances, events):
+        self.msg_runner.external_instance_event(ctxt, instances, events)
+
     def _response_to_aggregate(self, response):
         aggregate = response.value_or_raise()
         cells_utils.add_cell_to_aggregate(aggregate, response.cell_name)
diff --git a/nova/cells/messaging.py b/nova/cells/messaging.py
index eb5f436..6a14824 100644
--- a/nova/cells/messaging.py
+++ b/nova/cells/messaging.py
@@ -986,6 +986,24 @@ class _TargetedMessageMethods(_BaseMessageMethods):
         flavor.create()
         return flavor
 
+    def attach_interface(self, message, instance, network_id, port_id,
+                         requested_ip):
+        """Attach a port to an instance via compute_api.attach_interface()."""
+        return self._call_compute_api_with_obj(message.ctxt, instance,
+                                               'attach_interface',
+                                               network_id=network_id,
+                                               port_id=port_id,
+                                               requested_ip=requested_ip)
+
+    def detach_interface(self, message, instance, port_id):
+        """Detach a port to an instance via compute_api.detach_interface()."""
+        self._call_compute_api_with_obj(message.ctxt, instance,
+                                        'detach_interface', port_id=port_id)
+
+    def external_instance_event(self, message, instances, events):
+        return self.compute_api.external_instance_event(message.ctxt,
+                                                        instances, events)
+
 
 class _BroadcastMessageMethods(_BaseMessageMethods):
     """These are the methods that can be called as a part of a broadcast
@@ -1937,6 +1955,40 @@ class MessageRunner(object):
                                    'down', cell_name, need_response=True)
         return message.process()
 
+    def attach_interface(self, ctxt, instance, network_id,
+                       port_id, requested_ip):
+        """Attach an interface to an instance in its cell"""
+        extra_kwargs = dict(network_id=network_id,
+                            port_id=port_id,
+                            requested_ip=requested_ip)
+        return self._instance_action(ctxt, instance, 'attach_interface',
+                                    extra_kwargs=extra_kwargs,
+                                    need_response=True)
+
+    def detach_interface(self, ctxt, instance, port_id):
+        """Detach an interface to an instance in its cell"""
+        extra_kwargs = dict(port_id=port_id)
+        self._instance_action(ctxt, instance, 'detach_interface',
+                              extra_kwargs=extra_kwargs)
+
+    def external_instance_event(self, ctxt, instances, events):
+        """Send external instance events down to their respective
+        compute cells
+        """
+        method_kwargs = {'events': events}
+        mappings = {}
+        for instance in instances:
+            if instance.cell_name not in mappings:
+                mappings[instance.cell_name] = [instance, ]
+            else:
+                mappings[instance.cell_name].append(instance)
+        for cell_name, instances in mappings.items():
+            method_kwargs['instances'] = instances
+            message = _TargetedMessage(self, ctxt, 'external_instance_event',
+                                       method_kwargs, 'down',
+                                       cell_name, need_response=False)
+            return message.process()
+
     @staticmethod
     def get_message_types():
         return _CELL_MESSAGE_TYPE_TO_MESSAGE_CLS.keys()
diff --git a/nova/cells/rpcapi.py b/nova/cells/rpcapi.py
index 85bd32e..92f7de1 100644
--- a/nova/cells/rpcapi.py
+++ b/nova/cells/rpcapi.py
@@ -114,6 +114,9 @@ class CellsAPI(object):
         existing methods in 1.x after that point should be done such that they
         can handle the version_cap being set to 1.34.
 
+        * 1.34.1 - Add attach/detach interface, external_instance_event (patch
+                   0012)
+
         * 1.35 - Make instance_update_at_top, instance_destroy_at_top
                  and instance_info_cache_update_at_top use instance objects
         * 1.36 - Added 'delete_type' parameter to terminate_instance()
@@ -638,6 +641,34 @@ class CellsAPI(object):
         cctxt.cast(ctxt, 'set_admin_password', instance=instance,
                 new_pass=new_pass)
 
+    def attach_interface(self, ctxt, instance, network_id, port_id,
+                         requested_ip):
+        if not CONF.cells.enable:
+            return
+
+        cctxt = self.client.prepare(version='1.34.1')
+        return cctxt.call(ctxt, 'attach_interface',
+                          instance=instance,
+                          network_id=network_id,
+                          port_id=port_id,
+                          requested_ip=requested_ip)
+
+    def detach_interface(self, ctxt, instance, port_id):
+        if not CONF.cells.enable:
+            return
+        cctxt = self.client.prepare(version='1.34.1')
+        cctxt.cast(ctxt, 'detach_interface',
+                   instance=instance,
+                   port_id=port_id)
+
+    def external_instance_event(self, ctxt, instances, events):
+        """Broadcast external_instance_event downwards."""
+        if not CONF.cells.enable:
+            return
+        cctxt = self.client.prepare(version='1.34.1')
+        cctxt.cast(ctxt, 'external_instance_event',
+                   instances=instances,
+                   events=events)
     def get_keypair_at_top(self, ctxt, user_id, name):
         if not CONF.cells.enable:
             return
@@ -652,7 +683,7 @@ class CellsAPI(object):
 
     def create_aggregate(self, ctxt, cell_name,
                          aggregate_name, availability_zone):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'create_aggregate',
                           cell_name=cell_name,
                           aggregate_name=aggregate_name,
@@ -660,19 +691,19 @@ class CellsAPI(object):
 
 
     def get_aggregate(self, ctxt, cell_name, aggregate_id):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'get_aggregate',
                           cell_name=cell_name,
                           aggregate_id=aggregate_id)
 
 
     def get_aggregate_list(self, ctxt):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'get_aggregate_list')
 
 
     def update_aggregate(self, ctxt, cell_name, aggregate_id, values):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'update_aggregate', cell_name=cell_name,
                           aggregate_id=aggregate_id,
                           values=values)
@@ -680,7 +711,7 @@ class CellsAPI(object):
 
     def update_aggregate_metadata(self, ctxt, cell_name,
                                   aggregate_id, metadata):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'update_aggregate_metadata',
                           cell_name=cell_name,
                           aggregate_id=aggregate_id,
@@ -688,14 +719,14 @@ class CellsAPI(object):
 
 
     def delete_aggregate(self, ctxt, cell_name, aggregate_id):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'delete_aggregate',
                           cell_name=cell_name,
                           aggregate_id=aggregate_id)
 
 
     def add_host_to_aggregate(self, ctxt, cell_name, aggregate_id, host_name):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'add_host_to_aggregate',
                           cell_name=cell_name,
                           aggregate_id=aggregate_id, host_name=host_name)
@@ -703,7 +734,7 @@ class CellsAPI(object):
 
     def remove_host_from_aggregate(self, ctxt, cell_name,
                                    aggregate_id, host_name):
-        cctxt = self.client.prepare(version='1.24.1')
+        cctxt = self.client.prepare(version='1.34.1')
         return cctxt.call(ctxt, 'remove_host_from_aggregate',
                           cell_name=cell_name,
                           aggregate_id=aggregate_id,
diff --git a/nova/compute/cells_api.py b/nova/compute/cells_api.py
index c8efee3..8e939ce 100644
--- a/nova/compute/cells_api.py
+++ b/nova/compute/cells_api.py
@@ -50,7 +50,8 @@ class ComputeRPCAPIRedirect(object):
                         'confirm_resize', 'reset_network',
                         'inject_network_info',
                         'backup_instance', 'snapshot_instance',
-                        'set_admin_password']
+                        'set_admin_password', 'attach_interface',
+                        'detach_interface', 'external_instance_event']
 
     def __init__(self, cells_rpcapi):
         self.cells_rpcapi = cells_rpcapi
diff --git a/nova/tests/unit/cells/test_cells_manager.py b/nova/tests/unit/cells/test_cells_manager.py
index 1a43763..9e0e88b 100644
--- a/nova/tests/unit/cells/test_cells_manager.py
+++ b/nova/tests/unit/cells/test_cells_manager.py
@@ -880,6 +880,52 @@ class CellsManagerClassTestCase(test.TestCase):
             set_admin_password.assert_called_once_with(self.ctxt,
                     'fake-instance', 'fake-password')
 
+    def test_attach_interface(self):
+        fake_cell = 'parent!fake-cell'
+        fake_vif = {
+            'created_at': None,
+            'updated_at': None,
+            'deleted_at': None,
+            'deleted': 0,
+            'id': 1,
+            'address': '00:00:00:00:00:00',
+            'network_id': 123,
+            'instance_uuid': 'fake-uuid',
+            'uuid': 'fake-uuid-2',
+        }
+        fake_response = messaging.Response(self.ctxt, fake_cell, fake_vif,
+                                           False)
+        self.mox.StubOutWithMock(self.msg_runner, 'attach_interface')
+        self.msg_runner.attach_interface(self.ctxt, 'fake-instance',
+                                        'fake-network', None,
+                                        None).\
+            AndReturn(fake_response)
+        self.mox.ReplayAll()
+        response = self.cells_manager.attach_interface(self.ctxt,
+                                            instance='fake-instance',
+                                            network_id='fake-network',
+                                            port_id=None,
+                                            requested_ip=None)
+        self.assertEqual(fake_vif, response)
+
+    def test_detach_interface(self):
+        self.mox.StubOutWithMock(self.msg_runner, 'detach_interface')
+        self.msg_runner.detach_interface(self.ctxt, 'fake-instance',
+                                        'fake-port')
+        self.mox.ReplayAll()
+        self.cells_manager.detach_interface(self.ctxt,
+                                            instance='fake-instance',
+                                            port_id='fake-port')
+
+    def test_external_instance_event(self):
+        self.mox.StubOutWithMock(self.msg_runner, 'external_instance_event')
+        self.msg_runner.external_instance_event(self.ctxt, ['fake-instance'],
+                                         ['fake-event'])
+        self.mox.ReplayAll()
+        self.cells_manager.external_instance_event(self.ctxt,
+                                           instances=['fake-instance'],
+                                           events=['fake-event'])
+
     def _test_aggregate_method(self, method_name, *args, **kwargs):
         expected_response = {"name": "fun2", "id": 42}
         self.mox.StubOutWithMock(
diff --git a/nova/tests/unit/cells/test_cells_messaging.py b/nova/tests/unit/cells/test_cells_messaging.py
index 889bb5b..2663856 100644
--- a/nova/tests/unit/cells/test_cells_messaging.py
+++ b/nova/tests/unit/cells/test_cells_messaging.py
@@ -1241,6 +1241,8 @@ class CellsTargetedMethodsTestCase(test.TestCase):
                                'reset_network': 'reset_network',
                                'inject_network_info': 'inject_network_info',
                                'set_admin_password': 'set_admin_password',
+                               'attach_interface': 'attach_interface',
+                               'detach_interface': 'detach_interface',
                               }
         tgt_method = method_translations.get(method,
                                              '%s_instance' % method)
@@ -1481,6 +1483,28 @@ class CellsTargetedMethodsTestCase(test.TestCase):
         result = response.value_or_raise()
         self.assertEqual('fake_response', result)
 
+    def test_attach_interface(self):
+        kwargs = {'network_id': 'fake-network',
+                  'port_id': None,
+                  'requested_ip': None}
+        self._test_instance_action_method('attach_interface', [], kwargs, [],
+                kwargs, True)
+
+    def test_detach_interface(self):
+        kwargs = {'port_id': 'fake_port'}
+        self._test_instance_action_method('detach_interface', [], kwargs, [],
+                kwargs, False)
+
+    def test_external_instance_event(self):
+        instance1 = fake_instance.fake_instance_obj(self.ctxt)
+        instance1.cell_name = self.tgt_cell_name
+        instance2 = fake_instance.fake_instance_obj(self.ctxt)
+        instance2.cell_name = self.tgt_cell_name
+
+        self.src_msg_runner.external_instance_event(self.ctxt,
+                                        [instance1, instance2],
+                                        ['fake-event1', 'fake-event2'])
+
 
 class CellsBroadcastMethodsTestCase(test.TestCase):
     """Test case for _BroadcastMessageMethods class.  Most of these
diff --git a/nova/tests/unit/cells/test_cells_rpcapi.py b/nova/tests/unit/cells/test_cells_rpcapi.py
index 719da6d..668f316 100644
--- a/nova/tests/unit/cells/test_cells_rpcapi.py
+++ b/nova/tests/unit/cells/test_cells_rpcapi.py
@@ -761,6 +761,41 @@ class CellsAPITestCase(test.NoDBTestCase):
         self._check_result(call_info, 'set_admin_password',
                 expected_args, version='1.29')
 
+    def test_attach_interface(self):
+        call_info = self._stub_rpc_method('call', None)
+
+        self.cells_rpcapi.attach_interface(self.fake_context,
+                                'fake-instance', 'fake-network', None, None)
+
+        expected_args = {'instance': 'fake-instance',
+                         'network_id': 'fake-network',
+                         'port_id': None,
+                         'requested_ip': None}
+        self._check_result(call_info, 'attach_interface',
+                expected_args, version='1.34.1')
+
+    def test_detach_interface(self):
+        call_info = self._stub_rpc_method('cast', None)
+
+        self.cells_rpcapi.detach_interface(self.fake_context,
+                                    'fake-instance', 'fake-port')
+
+        expected_args = {'instance': 'fake-instance',
+                         'port_id': 'fake-port'}
+        self._check_result(call_info, 'detach_interface',
+                expected_args, version='1.34.1')
+
+    def test_external_instance_event(self):
+        call_info = self._stub_rpc_method('cast', None)
+
+        self.cells_rpcapi.external_instance_event(self.fake_context,
+                                    ['fake-instance'], ['fake-event'])
+
+        expected_args = {'instances': ['fake-instance'],
+                         'events': ['fake-event']}
+        self._check_result(call_info, 'external_instance_event',
+                           expected_args, version='1.34.1')
+
     def test_create_aggregate(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
 
@@ -771,7 +806,7 @@ class CellsAPITestCase(test.NoDBTestCase):
                          'aggregate_name': 'fake_aggregate',
                          'availability_zone': 'fake_zone'}
         self._check_result(call_info, 'create_aggregate',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def test_get_aggregate(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
@@ -781,7 +816,7 @@ class CellsAPITestCase(test.NoDBTestCase):
         expected_args = {'cell_name': 'fake_cell',
                          'aggregate_id': 'fake_id'}
         self._check_result(call_info, 'get_aggregate',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def test_get_aggregate_list(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
@@ -789,7 +824,7 @@ class CellsAPITestCase(test.NoDBTestCase):
         self.cells_rpcapi.get_aggregate_list(self.fake_context)
         expected_args = {}
         self._check_result(call_info, 'get_aggregate_list',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def test_update_aggregate(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
@@ -799,7 +834,7 @@ class CellsAPITestCase(test.NoDBTestCase):
         expected_args = dict(cell_name='fake_cell', aggregate_id='fake_id',
                              values={'name': 'spares'})
         self._check_result(call_info, 'update_aggregate',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def test_update_aggregate_metadata(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
@@ -809,7 +844,7 @@ class CellsAPITestCase(test.NoDBTestCase):
         expected_args = dict(cell_name='fake_cell', aggregate_id='fake_id',
                              metadata={'is_spare': True})
         self._check_result(call_info, 'update_aggregate_metadata',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def test_delete_aggregate(self):
         call_info = self._stub_rpc_method('call', None)
@@ -819,7 +854,7 @@ class CellsAPITestCase(test.NoDBTestCase):
         expected_args = {'cell_name': 'fake_cell',
                          'aggregate_id': 'fake_id'}
         self._check_result(call_info, 'delete_aggregate',
-                           expected_args, version='1.24.1')
+                           expected_args, version='1.34.1')
 
     def add_host_to_aggregate(self, ctxt, cell_name, aggregate_id, host_name):
         return self.call(ctxt,
@@ -835,7 +870,7 @@ class CellsAPITestCase(test.NoDBTestCase):
                               cell_name=cell_name,
                               aggregate_id=aggregate_id,
                               host_name=host_name),
-                version='1.24.1')
+                version='1.34.1')
 
     def test_get_keypair_at_top(self):
         call_info = self._stub_rpc_method('call', 'fake_response')
